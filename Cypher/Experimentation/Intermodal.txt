// Intermodal
MATCH path = (o:Location)-[:RAIL_TO*..3]->(j:Location)
,path2 = (j)-[:TRUCK_TO]->(d:Location)
,(c:City)<-[:IN]-(o)-[:IN]->(s:StateOrProvince)
,(c2:City)<-[:IN]-(d)-[:IN]->(s2:StateOrProvince)

WHERE 1=1
AND all(
x IN relationships(path)
WHERE 1=1
AND x.productType = $neodash_producttype_id
AND NOT x.miles = 0
AND (x.expirationDate >= $neodash_ship_date OR x.expirationDate IS NULL)
)
AND NOT o.type = 'JUNCTION'
AND c2.id = $neodash_city_id_2
AND s2.id = $neodash_stateorprovince_id_2
AND c.id =
	CASE WHEN isEmpty($neodash_city_id_1) THEN c.id
	ELSE $neodash_city_id_1 END
AND s.id =
	CASE WHEN isEmpty($neodash_stateorprovince_id_1) THEN s.id
	ELSE $neodash_stateorprovince_id_1 END
AND CASE WHEN isEmpty($neodash_rail_to_equipmenttype) THEN single(et IN ['SINGLE','85 UT', '100 UT'] WHERE all(x IN relationships(path) WHERE x.equipmentType = et))
	ELSE all(x IN relationships(path) WHERE x.equipmentType = $neodash_rail_to_equipmenttype) END

WITH o.id AS Origin, o.type AS OriginType, d.id AS Destination
,reduce(dist = 0, r IN relationships(path) | dist + coalesce(r.miles,9999)) AS totalMiles //coalesce with 9999 miles is to expose rates with no mileage
,min([x IN relationships(path)|x.expirationDate])[0] AS earliestExpiration
,round(reduce(cost = 0, r IN relationships(path) | cost + coalesce(r.totalCost,r.pvtTotalCost,1)),2) AS totalCost
,[x IN relationships(path)|x.equipmentType] AS equipmentType
	ORDER BY totalCost ASC

WITH Origin, OriginType, Destination, collect(totalMiles)[0] AS Miles
, collect(totalCost)[0] AS Freight, collect(earliestExpiration)[0] AS RateExpiration
, equipmentType[0] AS EquipmentType

RETURN Origin, OriginType, Freight,"Intermodal" AS Mode, Miles, EquipmentType, RateExpiration